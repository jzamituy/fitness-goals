// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserType {
  COACH
  NUTRITIONIST
  GYM_MEMBER
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  FAILED
  INACTIVE
  ARCHIVED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum MoodLevel {
  VERY_BAD
  BAD
  NEUTRAL
  GOOD
  VERY_GOOD
}

enum AlertType {
  LOW
  MEDIUM
  HIGH
}

enum AlertStatus {
  PENDING
  RESOLVED
}

enum NotificationType {
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum NotificationStatus {
  SENT
  FAILED
  PENDING
}

// Models
model User {
  id            String    @id @default(uuid()) @db.Uuid
  firstName     String
  lastName      String
  email         String    @unique
  phone         String?
  dateOfBirth   DateTime  @db.Date
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  isArchived    Boolean   @default(false)
  userType      UserType

  // Self-referential relationships
  coach         User?     @relation("UserToCoach", fields: [coachId], references: [id])
  coachId       String?   @db.Uuid
  coachees      User[]    @relation("UserToCoach")

  nutritionist  User?     @relation("UserToNutritionist", fields: [nutritionistId], references: [id])
  nutritionistId String?  @db.Uuid
  clients       User[]    @relation("UserToNutritionist")

  // Relationships to other models
  goals         Goal[]
  attendances   Attendance[]
  moods         Mood[]
  alerts        Alert[]
  notifications Notification[]

  @@index([email])
  @@index([coachId])
  @@index([nutritionistId])
}

model Goal {
  id        String      @id @default(uuid()) @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  type      String
  startDate DateTime    @db.Date
  endDate   DateTime    @db.Date
  status    GoalStatus
  diet      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model Attendance {
  id        String           @id @default(uuid()) @db.Uuid
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @db.Uuid
  date      DateTime         @db.Date
  status    AttendanceStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@index([date])
}

model Mood {
  id        String    @id @default(uuid()) @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.Uuid
  date      DateTime  @db.Date
  level     MoodLevel
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([date])
}

model Alert {
  id        String      @id @default(uuid()) @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.Uuid
  type      AlertType
  reason    String
  status    AlertStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model Notification {
  id        String             @id @default(uuid()) @db.Uuid
  user      User               @relation(fields: [userId], references: [id])
  userId    String             @db.Uuid
  type      NotificationType
  content   String
  status    NotificationStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}
